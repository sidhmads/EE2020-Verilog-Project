`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// AY1718 Sem 1 EE2020 Project
// Project Name: Audio Effects
// Module Name: AUDIO_FX_TOP
// Team No.: 
// Student Names: 
// Matric No.:
// Description: 
// 
// Work Distribution:
//////////////////////////////////////////////////////////////////////////////////

module AUDIO_FX_TOP(
    input CLK,            // 100MHz FPGA clock
    
    input  J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    input Do,
    input Re,
    input Mi,
    input Fa,
    input So,
    input La,
    input instrumentToggle,
    input delayToggle,
    input repeatToggle,
    input fasterPitch,
    input togglePlayPause,
    input toggleMixedNotes,
    input countdownToggle,
    input toggleCD,
    input btnD,
    input [2:0] userInput,
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module SPI.v)
    output J_DA2_Pin1,    // PmodDA2 sampling clock (generated by module DA2RefComp.vhd)
    output J_DA2_Pin2,    // PmodDA2 Data_A, 12-bit speaker output (generated by module DA2RefComp.vhd)
    output J_DA2_Pin3,    // PmodDA2 Data_B, not used (generated by module DA2RefComp.vhd)
    output J_DA2_Pin4,    // PmodDA2 serial clock, 50MHz clock
    output [3:0] an, // anode signals of the 7-segment LED display
    output [6:0] seg, // cathode patterns of the 7-segment LED display
    output [15:0] led
    );

    //////////////////////////////////////////////////////////////////////////////////
    // Clock Divider Module: Generate necessary clocks from 100MHz FPGA CLK
    // Please create the clock divider module and instantiate it here.
      wire clk_5;
      wire clk_20k;
      wire clk_50M;
      
      clk_5HZ  clk5 (CLK, clk_5);
      clk_20kHz clk20k (CLK, clk_20k);
      clk_50MHz clk50M (CLK, clk_50M);
      
     //////////////////////////////////////////////////////////////////////////////////
     //SPI Module: Converting serial data into a 12-bit parallel register
     //Do not change the codes in this area
       wire [11:0]MIC_in;
       SPI u1 (CLK, clk_20k, J_MIC3_Pin3, J_MIC3_Pin1, J_MIC3_Pin4, MIC_in);
   
    /////////////////////////////////////////////////////////////////////////////////////
    // Real-time Audio Effect Features
    // Please create modules to implement different features and instantiate them here   
      wire [11:0] speaker_out;
      wire [11:0] sound;
      wire [11:0] repeatSound;
      wire [11:0] delay;
      wire [11:0] countdown;
      wire [15:0] ledVolume;
      wire [11:0] segVolume;
      wire [15:0] ledVoice;
      wire [2:0] segVoice;
      wire [11:0] segmentValue;
      
      Playback pb (CLK,clk_20k, togglePlayPause, repeatSound);
      
      VolumeControl vc (CLK, clk_20k, clk_5, MIC_in, btnD, ledVolume, segVolume);
       
      Delay(clk_20k,fasterPitch,MIC_in, delay);
      
      instrument ins (Do, Re, Mi, Fa, So, La, CLK, toggleMixedNotes, sound[10]);
      
      VoiceCountdown(CLK, userInput, toggleCD, countdown, ledVoice, segVoice);
      
      Seven_segment_LED_Display_Controller seven (CLK,segmentValue,an,seg);
      
      assign segmentValue = (countdownToggle) ? segVoice : segVolume;
      
      assign speaker_out = (instrumentToggle) ? sound :
       (delayToggle ? delay : (repeatToggle ? repeatSound : (countdownToggle ? countdown : MIC_in)));
       
      assign led = (countdownToggle) ? ledVoice :  ledVolume;

        
       
    /////////////////////////////////////////////////////////////////////////////////////
    //DAC Module: Digital-to-Analog Conversion
    //Do not change the codes in this area        
      DA2RefComp u2(clk_50M, clk_20k, speaker_out, ,1'b0, J_DA2_Pin2, J_DA2_Pin3, J_DA2_Pin4, J_DA2_Pin1,);
        
  //////////////////////////////////////////////////////////////////////////////////

endmodule
